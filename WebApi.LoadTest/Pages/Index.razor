@page "/"
@using System.Text

<h1>Welcome back!</h1>

<p>Let's load test this sucker</p>

<button class="btn btn-primary" @onclick="LoadTest">Click me</button>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {

    public class TestData
    {
        public string Url { get; set; }
        public string Method { get; set; }
        public string PayloadSerialized { get; set; }
    }

    private static async Task LoadTest()
    {
        const int maxIterations = 500;
        const int maxParallelRequests = 24;
        const int delay = 100;

        var testData = new List<TestData>
        {
            new TestData
            {
                Url = "http://192.168.1.44:44000/customer/1",
                Method = "GET"
            },
            new TestData
            {
                Url = "http://192.168.1.44:44000/order/1",
                Method = "GET"
            }
        };

        using var httpClient = new HttpClient();

        // Add any headers
        // httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

        for (var step = 1; step < maxIterations; step++)
        {
            var tasks = new List<Task<HttpResponseMessage>>();

            for (var i = 0; i < maxParallelRequests; i++)
            {
                var t = testData[i % 2];

                var method = t.Method;
                switch (method)
                {
                    case "GET":
                        tasks.Add(httpClient.GetAsync(t.Url));
                        break;
                    case "POST":
                        var data = new StringContent(t.PayloadSerialized, Encoding.UTF8, "application/json");
                        tasks.Add(httpClient.PostAsync(t.Url, data));
                        break;
                }
            }

            // Run all tasks in parallel
            var result = await Task.WhenAll(tasks);

            // Some delay before new iteration
            await Task.Delay(delay);
        }
    }
}
